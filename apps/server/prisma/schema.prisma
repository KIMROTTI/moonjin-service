generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(64)
  password    String?  @db.VarChar(64)
  nickname    String   @unique @db.VarChar(16)
  createdAt   DateTime
  description String   @default("") @db.VarChar(256)
  image       String   @db.VarChar(128)
  role        Int      @default(0)
  deleted     Boolean  @default(false)

  oauth          Oauth?
  writerInfo     WriterInfo?
  follow         Subscribe[]
  letter         Letter[]         @relation(name: "sender")
  letter2        Letter[]         @relation(name: "receiver")
  WebNewsletter  WebNewsletter[]
  NewsletterLike NewsletterLike[]
  seriesLike     SeriesLike[]
}

model Oauth {
  oauthId String @id @unique @db.VarChar(64)
  userId  Int    @unique
  social  String @db.VarChar(8)
  user    User   @relation(fields: [userId], references: [id])
}

model WriterInfo {
  userId          Int      @id @unique
  moonjinId       String   @unique @db.VarChar(32)
  createdAt       DateTime
  newsletterCount Int      @default(0)
  seriesCount     Int      @default(0)
  followerCount   Int      @default(0)
  priority        Int      @default(0)
  deleted         Boolean  @default(false)

  user              User                @relation(fields: [userId], references: [id])
  post              Post[]
  series            Series[]
  subscribe         Subscribe[]
  subscribeExternal SubscribeExternal[]
}

model Subscribe {
  followerId Int
  writerId   Int
  level      Int      @default(0)
  createdAt  DateTime
  hide       Boolean  @default(false)

  user       User       @relation(fields: [followerId], references: [id])
  writerInfo WriterInfo @relation(fields: [writerId], references: [userId])

  @@id([followerId, writerId])
  @@index([writerId])
  @@index([followerId])
}

model SubscribeExternal {
  writerId        Int
  subscriberEmail String   @db.VarChar(64)
  subscriberName  String   @db.VarChar(32)
  createdAt       DateTime

  writerInfo WriterInfo @relation(fields: [writerId], references: [userId])

  @@id([subscriberEmail, writerId])
  @@index([writerId])
}

model Post {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(32)
  subtitle      String   @default("") @db.VarChar(256)
  writerId      Int
  preview       String   @default("") @db.VarChar(512)
  category      Int      @default(-1)
  cover         String   @db.VarChar(128)
  createdAt     DateTime
  lastUpdatedAt DateTime @default(now())
  seriesId      Int      @default(0)
  deleted       Boolean  @default(false)

  writerInfo  WriterInfo    @relation(fields: [writerId], references: [userId])
  newsletter  Newsletter?
  series      Series?       @relation(fields: [seriesId], references: [id])
  postContent PostContent[]

  @@index([writerId])
  @@index([seriesId])
}

model NewsletterCurationWeekly {
  newsletterId Int @id
  order        Int

  newsletter Newsletter? @relation(fields: [newsletterId], references: [id])

  @@index([newsletterId])
}

model PostContent {
  id        Int      @id @default(autoincrement())
  postId    Int
  content   String   @db.Text
  createdAt DateTime

  post       Post        @relation(fields: [postId], references: [id])
  newsletter Newsletter?

  @@index([postId])
}

model Newsletter {
  id            Int      @id @default(autoincrement())
  postId        Int      @unique
  postContentId Int      @unique
  clicks        Int      @default(0)
  likes         Int      @default(0)
  comments      Int      @default(0)
  priority      Int      @default(0)
  sentAt        DateTime @default(now())

  post                     Post                      @relation(fields: [postId], references: [id])
  postContent              PostContent               @relation(fields: [postContentId], references: [id])
  newsletterSend           NewsletterSend[]
  webNewsletter            WebNewsletter[]
  NewsletterLike           NewsletterLike[]
  newsletterCurationWeekly NewsletterCurationWeekly?

  @@index([postId])
}

model NewsletterSend {
  id           Int      @id @default(autoincrement())
  newsletterId Int
  title        String   @db.VarChar(128)
  sentAt       DateTime

  newsletter     Newsletter       @relation(fields: [newsletterId], references: [id])
  mailNewsletter MailNewsletter[]

  @@index([newsletterId])
}

model MailNewsletter {
  id               Int    @id @default(autoincrement())
  newsletterSendId Int
  receiverEmail    String @db.VarChar(64)

  newsletterSend      NewsletterSend        @relation(fields: [newsletterSendId], references: [id])
  NewsletterAnalytics NewsletterAnalytics[]

  @@unique([newsletterSendId, receiverEmail])
  @@index([newsletterSendId])
}

model WebNewsletter {
  newsletterId   Int
  receiverId     Int
  isRead         Boolean @default(false)
  hideByReceiver Boolean @default(false)

  newsletter Newsletter @relation(fields: [newsletterId], references: [id])
  user       User       @relation(fields: [receiverId], references: [id])

  @@id([newsletterId, receiverId])
  @@index([newsletterId])
  @@index([receiverId])
}

model NewsletterAnalytics {
  id               String
  mailNewsletterId Int
  event            Int
  timestamp        DateTime

  mailNewsletter MailNewsletter @relation(fields: [mailNewsletterId], references: [id])

  @@id([event, mailNewsletterId])
  @@index([mailNewsletterId])
  @@index([event])
}

model NewsletterLike {
  newsletterId Int
  userId       Int
  createdAt    DateTime

  newsletter Newsletter @relation(fields: [newsletterId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@id([newsletterId, userId])
  @@index([newsletterId])
  @@index([userId])
}

model Series {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(32)
  description     String   @default("") @db.VarChar(256)
  writerId        Int
  category        Int      @default(-1)
  cover           String   @db.VarChar(128)
  clicks          Int      @default(0)
  newsletterCount Int      @default(0)
  likes           Int      @default(0)
  createdAt       DateTime
  priority        Int      @default(0)
  lastUpdatedAt   DateTime @default(now())
  deleted         Boolean  @default(false)

  writerInfo WriterInfo   @relation(fields: [writerId], references: [userId])
  post       Post[]
  seriesLike SeriesLike[]

  @@index([writerId])
}

model SeriesLike {
  seriesId  Int
  userId    Int
  createdAt DateTime

  series Series @relation(fields: [seriesId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([seriesId, userId])
  @@index([seriesId])
  @@index([userId])
}

model Letter {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  title      String    @db.VarChar(128)
  content    String    @db.Text
  createdAt  DateTime
  readAt     DateTime?
  deleted    Boolean   @default(false)

  sender   User @relation(name: "sender", fields: [senderId], references: [id])
  receiver User @relation(name: "receiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}
