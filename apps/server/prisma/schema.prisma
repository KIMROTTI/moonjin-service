generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(32)
  password    String?  @db.VarChar(64)
  nickname    String   @unique @db.VarChar(16)
  createdAt   DateTime
  description String   @default("") @db.VarChar(256)
  image       String   @db.VarChar(128)
  role        Int      @default(0)
  deleted     Boolean  @default(false)

  oauth      Oauth?
  writerInfo WriterInfo?
  follow     Subscribe[]
  newsletter Newsletter[]
  letter     Letter[]     @relation(name: "sender")
  letter2    Letter[]     @relation(name: "receiver")
}

model Oauth {
  oauthId String @id @unique @db.VarChar(64)
  userId  Int    @unique
  social  String @db.VarChar(8)
  user    User   @relation(fields: [userId], references: [id])
}

model WriterInfo {
  userId          Int      @id @unique
  moonjinId       String   @unique @db.VarChar(32)
  createdAt       DateTime
  newsletterCount Int      @default(0)
  seriesCount     Int      @default(0)
  followerCount   Int      @default(0)
  status          Boolean  @default(true)
  deleted         Boolean  @default(false)

  user              User                @relation(fields: [userId], references: [id])
  post              Post[]
  series            Series[]
  subscribe         Subscribe[]
  subscribeExternal SubscribeExternal[]
}

model Subscribe {
  followerId Int
  writerId   Int
  level      Int      @default(0)
  createdAt  DateTime
  hide       Boolean  @default(false)

  user       User       @relation(fields: [followerId], references: [id])
  writerInfo WriterInfo @relation(fields: [writerId], references: [userId])

  @@id([followerId, writerId])
  @@index([writerId])
  @@index([followerId])
}

model SubscribeExternal {
  writerId      Int
  followerEmail String
  createdAt     DateTime

  writerInfo WriterInfo @relation(fields: [writerId], references: [userId])

  @@id([followerEmail, writerId])
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(32)
  subtitle      String    @default("") @db.VarChar(128)
  writerId      Int
  preview       String    @default("") @db.VarChar(512)
  category      String    @default("") @db.VarChar(16)
  cover         String    @db.VarChar(128)
  clicks        Int       @default(0)
  createdAt     DateTime
  lastUpdatedAt DateTime  @default(now())
  releasedAt    DateTime?
  seriesId      Int       @default(0)
  status        Boolean   @default(false)
  deleted       Boolean   @default(false)

  writerInfo  WriterInfo    @relation(fields: [writerId], references: [userId])
  newsletter  Newsletter[]
  series      Series?       @relation(fields: [seriesId], references: [id])
  postContent PostContent[]

  @@index([writerId])
  @@index([seriesId])
}

model PostContent {
  id        Int      @id @default(autoincrement())
  postId    Int
  content   String   @db.Text
  createdAt DateTime

  post       Post         @relation(fields: [postId], references: [id])
  Newsletter Newsletter[]

  @@index([postId])
}

model Newsletter {
  id            Int      @id @default(autoincrement())
  postId        Int
  postContentId Int      @default(0)
  title         String   @db.VarChar(128)
  sentAt        DateTime
  status        Boolean  @default(true)

  post             Post               @relation(fields: [postId], references: [id])
  postContent      PostContent        @relation(fields: [postContentId], references: [id])
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?
  newsletterInMail NewsletterInMail[]
  newsletterInWeb  NewsletterInWeb[]

  @@index([postId])
}

model NewsletterInMail {
  newsletterId  Int
  receiverEmail String
  isSent        Boolean @default(false)
  isOpened      Boolean @default(false)

  newsletter Newsletter @relation(fields: [newsletterId], references: [id])

  @@id([newsletterId, receiverEmail])
}

model NewsletterInWeb {
  newsletterId   Int
  receiverId     Int
  isRead         Boolean @default(false)
  hideByReceiver Boolean @default(false)

  newsletter Newsletter @relation(fields: [newsletterId], references: [id])

  @@id([newsletterId, receiverId])
}

model Series {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(32)
  writerId      Int
  category      String   @db.VarChar(16)
  cover         String   @db.VarChar(128)
  clicks        Int      @default(0)
  createdAt     DateTime
  lastUpdatedAt DateTime @default(now())
  description   String   @default("") @db.VarChar(256)
  status        Boolean  @default(true)
  deleted       Boolean  @default(false)

  writerInfo WriterInfo @relation(fields: [writerId], references: [userId])
  post       Post[]

  @@index([writerId])
}

model Letter {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  title      String    @db.VarChar(128)
  content    String    @db.Text
  createdAt  DateTime
  readAt     DateTime?
  deleted    Boolean   @default(false)

  sender   User @relation(name: "sender", fields: [senderId], references: [id])
  receiver User @relation(name: "receiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}
