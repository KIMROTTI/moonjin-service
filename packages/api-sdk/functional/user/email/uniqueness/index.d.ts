/**
 * @packageDocumentation
 * @module api.functional.user.email.uniqueness
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, Primitive } from "@nestia/fetcher";
import type { ICheckEmailExist } from "../../../../structures/ICheckEmailExist";
import type { TryCatchResponseMessageEMAIL_ALREADY_EXIST } from "../../../../structures/TryCatchResponseMessageEMAIL_ALREADY_EXIST";
/**
 *
 * @summary 메일 중복 확인
 * @param payload 이메일이 담긴 객체
 * @returns "해당 메일을 사용하실 수 있습니다."
 * @throws EMAIL_ALREADY_EXIST
 *
 * @controller UserController.checkEmailExist
 * @path POST /user/email/uniqueness
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function checkEmailExist(connection: IConnection, payload: checkEmailExist.Input): Promise<checkEmailExist.Output>;
export declare namespace checkEmailExist {
    type Input = Primitive<ICheckEmailExist>;
    type Output = Primitive<TryCatchResponseMessageEMAIL_ALREADY_EXIST>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/user/email/uniqueness";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: null;
    };
    const path: () => string;
}
