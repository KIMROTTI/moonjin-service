"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emailVerification = void 0;
const PlainFetcher_1 = require("@nestia/fetcher/lib/PlainFetcher");
/**
 *
 * @Summary 인증 메일에서 링크를 눌렀을 때 일어나는 인증 과정
 * @param payload 이메일 인증 code가 담긴 객체
 * @returns 메일 인증 결과 페이지로 redirect
 *
 * @controller UserController.emailVerification
 * @path GET /user/email/verification
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
async function emailVerification(connection, payload) {
    return PlainFetcher_1.PlainFetcher.fetch(connection, {
        ...emailVerification.METADATA,
        path: emailVerification.path(payload),
    });
}
exports.emailVerification = emailVerification;
(function (emailVerification) {
    emailVerification.METADATA = {
        method: "GET",
        path: "/user/email/verification",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    };
    emailVerification.path = (payload) => {
        const variables = payload;
        const search = new URLSearchParams();
        for (const [key, value] of Object.entries(variables))
            if (value === undefined)
                continue;
            else if (Array.isArray(value))
                value.forEach((elem) => search.append(key, String(elem)));
            else
                search.set(key, String(value));
        const encoded = search.toString();
        return `/user/email/verification${encoded.length ? `?${encoded}` : ""}`;
        ;
    };
})(emailVerification || (exports.emailVerification = emailVerification = {}));
