/**
 * @packageDocumentation
 * @module api.functional.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, Primitive } from "@nestia/fetcher";
import type { ILocalSignUp } from "../../structures/ILocalSignUp";
import type { TryCatchResponseMessageEMAIL_ALREADY_EXISTNICKNAME_ALREADY_EXISTMOONJIN_EMAIL_ALREADY_EXISTSIGNUP_ERRORWRITER_SIGNUP_ERROREMAIL_NOT_EXIST } from "../../structures/TryCatchResponseMessageEMAIL_ALREADY_EXISTNICKNAME_ALREADY_EXISTMOONJIN_EMAIL_ALREADY_EXISTSIGNUP_ERRORWRITER_SIGNUP_ERROREMAIL_NOT_EXIST";
export * as email from "./email";
export * as auth from "./auth";
export * as oauth from "./oauth";
/**
 *
 * @summary 로걸 회원가입 기능
 * @param localSignUpData 회원가입 정보
 * @returns "메일이 전송되었습니다."
 * @throws EMAIL_ALREADY_EXIST
 * @throws NICKNAME_ALREADY_EXIST
 * @throws MOONJIN_EMAIL_ALREADY_EXIST
 * @throws SIGNUP_ERROR
 * @throws WRITER_SIGNUP_ERROR
 * @throws EMAIL_NOT_EXIST
 *
 * @controller UserController.localSignUp
 * @path POST /user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function localSignUp(connection: IConnection, localSignUpData: localSignUp.Input): Promise<localSignUp.Output>;
export declare namespace localSignUp {
    type Input = Primitive<ILocalSignUp>;
    type Output = Primitive<TryCatchResponseMessageEMAIL_ALREADY_EXISTNICKNAME_ALREADY_EXISTMOONJIN_EMAIL_ALREADY_EXISTSIGNUP_ERRORWRITER_SIGNUP_ERROREMAIL_NOT_EXIST>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/user";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: null;
    };
    const path: () => string;
}
