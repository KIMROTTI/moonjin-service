/**
 * @packageDocumentation
 * @module api.functional.user.auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, Primitive } from "@nestia/fetcher";
import type { ILocalLogin } from "../../../structures/ILocalLogin";
import type { TryCatchResponseMessageLOGIN_ERRORINVALID_PASSWORDUSER_NOT_FOUNDSOCIAL_USER_ERROREMAIL_NOT_VERIFIED } from "../../../structures/TryCatchResponseMessageLOGIN_ERRORINVALID_PASSWORDUSER_NOT_FOUNDSOCIAL_USER_ERROREMAIL_NOT_VERIFIED";
/**
 *
 * @summary 로그인 기능
 * @param localLoginData 로그인 정보
 * @returns "로그인이 완료되었습니다"
 * @throws LOGIN_ERROR
 * @throws INVALID_PASSWORD
 * @throws USER_NOT_FOUND
 * @throws SOCIAL_USER_ERROR
 * @throws EMAIL_NOT_VERIFIED
 *
 * @controller UserController.localLogin
 * @path POST /user/auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function localLogin(connection: IConnection, localLoginData: localLogin.Input): Promise<localLogin.Output>;
export declare namespace localLogin {
    type Input = Primitive<ILocalLogin>;
    type Output = Primitive<TryCatchResponseMessageLOGIN_ERRORINVALID_PASSWORDUSER_NOT_FOUNDSOCIAL_USER_ERROREMAIL_NOT_VERIFIED>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/user/auth";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: null;
    };
    const path: () => string;
}
